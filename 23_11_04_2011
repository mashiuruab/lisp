;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname 23_11_04_2011) (read-case-sensitive #t) (teachpacks ((lib "draw.ss" "teachpack" "htdp") (lib "hangman.ss" "teachpack" "htdp") (lib "guess.ss" "teachpack" "htdp") (lib "gui.ss" "teachpack" "htdp") (lib "graphing.ss" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "draw.ss" "teachpack" "htdp") (lib "hangman.ss" "teachpack" "htdp") (lib "guess.ss" "teachpack" "htdp") (lib "gui.ss" "teachpack" "htdp") (lib "graphing.ss" "teachpack" "htdp")))))
;;...........................23.3.7..............................

(define (part1 x)
  (/ (- x 1) (+ x 1)))

(define (temp-ln x start end)
  (cond
    [(= start end) 0]
    [else (+ (* (/ 1 start) (expt (part1 x) start)) (temp-ln x (+ start 2) end))]))

(define (my-ln x)
  (* 2 (temp-ln x 1 291)))

;;.......................23.3.8.................................

(define (factorial n)
  (cond
    [(= n 0) 1]
    [else (* n (factorial (- n 1)))]))

(define (my-temp-sin x start end temp)
  (cond
    [(= start end) 0]
    [else (+ (* (expt -1 temp) (/ (expt x start) (factorial start))) (my-temp-sin x (+ start 2) end (add1 temp)))]))

(define (my-sin x)
  (my-temp-sin x 1 19 0))



;;......................23.3.9..............................

(define (temp-greg start end temp)
  (cond
    [(= start end) 0]
    [else (+ (* (expt -1 temp) (/ 1 start)) (temp-greg (+ start 2) end (+ temp 1)))]))

(define (my-greg a)
  (* 4 (temp-greg 1 9999 0)))

;;.......................23.4.1...............................

(define (f x)
  (+ (* x x) (* 5 x) 6))

(define (trapi-area a b1 b2)
  (* a (/ (+ b1 b2) 2)))

(define (integrate-kepler f a b)
  (+ (trapi-area (- (+ a (/ (- b a) 2)) a) (f a) (f (+ a (/ (- b a) 2)))) (trapi-area (- b (/ (+ a (- b a)) 2)) (f (+ a (/ (- b a) 2))) (f b))))


;;....................23.4.2..................................

(define (rectangle-area width height)
  (* width height))

(define (temp-integrate f a b r)
  (local ((define w (/ (- b a) r))
          (define s (/ w 2)))
    (temp1-integrate f a b w s)))

(define (temp1-integrate f a b w s)
  (cond
    [(= a b) 0]
    [else (+ (* w (f (+ a s))) (temp1-integrate f (+ a w) b w s))]))

(define (integrate f a b)
  (temp-integrate f a b 10000))

(define (f1 x)
  (+ x 4))

;;.................23.5.2............................

(define (my-line x)
  (line-from-point+slope (make-posn 0 4) 1 x))


(define (line-from-point+slope a-posn a-slope x)
  (+ (* a-slope x) (- (posn-y a-posn) (* a-slope (posn-x a-posn)))))


;;.............................23.5.3.............................

(define (f2 x)
  (+ (* x x) (* -4 x) 7))

(define (slope f x eps)
  (/ (- (f (+ x eps)) (f (- x eps))) (* 2 eps)))

(define (point-slope a-posn x)
  (+ (* (slope f2 2 .005) x) (- (posn-y a-posn) (* (slope f2 2 .005) (posn-x a-posn)))))

(define (my-line1 x)
  (point-slope (make-posn 2 (f2 2)) x))


;;..........................................................................
;;..........................................................................

(define (a-line x)
  (+ (* x x) (* -4 x) 7))

(define (d/dx f)
  (local ((define eps .0005)
          (define (fprime x)
	    (/ (- (f (+ x eps)) (f (- x eps)))
	       (* 2 eps)))
	  )
    fprime))

(define f3 (d/dx a-line))

;;..............................................................

;;.........................23.5.5............................

(define (line-from-two-points a-posn1 a-posn2 x)
  (+ (* (- (posn-y a-posn1) (posn-y a-posn2)) (/ (- x (posn-x a-posn1)) (- (posn-x a-posn1) (posn-x a-posn2)))) (posn-y a-posn1)))

(define (t-points x)
  (line-from-two-points (make-posn 0 0) (make-posn 25 25) x))

;;.........................23.5.6...................................


(define (f4 x) 
  (+ (* 1/60 (* x x x))
     (* -1/10 (* x x))
     5))



(define (compute-slope x eps)
  (/ (- (f4 (+ x eps)) (f4 (- x eps))) (* 2 eps)))